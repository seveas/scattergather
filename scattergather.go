// Code generated by go2go; DO NOT EDIT.


//line scattergather.go2:2
package scattergather

//line scattergather.go2:2
import (
//line scattergather.go2:2
 "context"
//line scattergather.go2:2
 "errors"
//line scattergather.go2:2
 "fmt"
//line scattergather.go2:2
 "golang.org/x/sync/semaphore"
//line scattergather.go2:2
 "runtime"
//line scattergather.go2:2
 "sort"
//line scattergather.go2:2
 "sync"
//line scattergather.go2:2
 "testing"
//line scattergather.go2:2
)

//line scattergather.go2:93
type ScatteredError struct {
	Errors []error
}

//line scattergather.go2:98
func (e *ScatteredError) HasErrors() bool {
	return e != nil && e.Errors != nil && len(e.Errors) > 0
}

//line scattergather.go2:103
func (e *ScatteredError) AddError(err error) {
	if e.Errors == nil {
		e.Errors = []error{err}
	} else {
		e.Errors = append(e.Errors, err)
	}
}

//line scattergather.go2:112
func (e *ScatteredError) Error() string {
	if e == nil {
		return "(nil error)"
	}
	if e.Errors == nil || len(e.Errors) == 0 {
		return "(empty scattered error)"
	}
	errstr := e.Errors[0].Error()
	for _, err := range e.Errors[1:] {
		errstr += "\n" + err.Error()
	}
	return errstr
}

//line scattergather.go2:127
func (e *ScatteredError) Is(target error) bool {
	t, ok := target.(*ScatteredError)
	if !ok || len(e.Errors) != len(t.Errors) {
		return false
	}
	for i, err := range t.Errors {
		if !errors.Is(err, e.Errors[i]) {
			return false
		}
	}
	return true
}

//line scattergather.go2:138
type Importableà­¦ int

//line scattergather.go2:138
var _ = context.Background
//line scattergather.go2:138
var _ = errors.As
//line scattergather.go2:138
var _ = fmt.Errorf
//line scattergather.go2:138
var _ = semaphore.NewWeighted
//line scattergather.go2:138
var _ = runtime.BlockProfile

//line scattergather.go2:138
type _ sort.Float64Slice
//line scattergather.go2:138
type _ sync.Cond

//line scattergather.go2:138
var _ = testing.AllocsPerRun
